<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>fqpabi8</span></p>
<p>個人倉儲: <a href="https://github.com/mdecp2024/hw-S41323227">https://github.com/mdecp2024/hw-S41323227</a></p>
<p>個人網站: <a href="https://mdecp2024.github.io/hw-S41323227">https://mdecp2024.github.io/hw-S41323227</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w15</h3>
<p><a href="https://mdecp2024.github.io/hw-S41323227/content/Brython.html?src=https://gist.githubusercontent.com/S41323227/8b4e16048f9b9cfc09e8248d1ddee026/raw/8a5734359bcc10eb308cb45b0287b4091a2c7791/w15_1">數字總和</a></p><h3>w14_ex</h3>
<p><a href="https://mdecp2024.github.io/hw-S41323227/content/Brython.html?src=https://gist.githubusercontent.com/S41323227/508619af4bc4767cb56e62dda7fabc8d/raw/93bb0d34ad3c74d39b26edd6c64ba7c475446bd8/w14_ex">三個圓隨機顏色固定位子</a></p>
<p><a href="https://mdecp2024.github.io/hw-S41323227/content/Brython.html?src=https://gist.githubusercontent.com/S41323227/3bba08e190f71cc009bb96ce4ed33488/raw/452b7750223ecbcab44df8e774df28c99734ecca/w14_1">三個圓隨機顏色隨機位子</a></p>
<div id="brython_div1"></div>
<p><!-- 導入 brython 程式庫 --></p>
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<p><!-- 啟動 Brython --></p>
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc
import random

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    # 創建 canvas 並設置寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div <= canvas
    
    # 獲取 canvas 的 2D 上下文
    ctx = canvas.getContext("2d")
    
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2

# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    # 初始化畫布
    canvas, ctx = initialize_canvas(400, 400)
    
    # 清除畫布
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    
    # 顏色區域存儲
    color_dict = {}

    # 使用掃描線方法填充區域
    for py in range(0, canvas.height):
        # 逐行掃描，判斷每個點是否在圓內
        current_color = None  # 當前掃描線區域的顏色
        for px in range(0, canvas.width):
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)
            
            if in_circle1 and in_circle2 and in_circle3:
                # 三圓交集區域
                if "intersection" not in color_dict:
                    color_dict["intersection"] = random_color_generator()
                current_color = color_dict["intersection"]
            elif in_circle1 and in_circle2:
                # 圓1與圓2的交集區域
                if "circle1_circle2" not in color_dict:
                    color_dict["circle1_circle2"] = random_color_generator()
                current_color = color_dict["circle1_circle2"]
            elif in_circle1 and in_circle3:
                # 圓1與圓3的交集區域
                if "circle1_circle3" not in color_dict:
                    color_dict["circle1_circle3"] = random_color_generator()
                current_color = color_dict["circle1_circle3"]
            elif in_circle2 and in_circle3:
                # 圓2與圓3的交集區域
                if "circle2_circle3" not in color_dict:
                    color_dict["circle2_circle3"] = random_color_generator()
                current_color = color_dict["circle2_circle3"]
            elif in_circle1:
                # 只在圓1內
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 只在圓2內
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                # 只在圓3內
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                # 點不在三個圓內，畫外區域
                current_color = "white"  # 背景色白色

            # 填充顏色
            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素

# 直接設定圓心和半徑
x1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100
x3, y3, r3 = 200, 300, 100  # 圓3：圓心 (200, 100)，半徑 100

# 呼叫畫圓函式
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)
</script>
</p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc
import random

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    # 創建 canvas 並設置寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div <= canvas
    
    # 獲取 canvas 的 2D 上下文
    ctx = canvas.getContext("2d")
    
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 定義隨機圓心座標生成函式
def random_circle_position(canvas_width, canvas_height, max_radius):
    x = random.randint(max_radius, canvas_width - max_radius)
    y = random.randint(max_radius, canvas_height - max_radius)
    return x, y

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2

# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(canvas_width, canvas_height, r1, r2, r3):
    # 隨機生成三個圓的圓心
    x1, y1 = random_circle_position(canvas_width, canvas_height, r1)
    x2, y2 = random_circle_position(canvas_width, canvas_height, r2)
    x3, y3 = random_circle_position(canvas_width, canvas_height, r3)
    
    # 初始化畫布
    canvas, ctx = initialize_canvas(canvas_width, canvas_height)
    
    # 清除畫布
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    
    # 顏色區域存儲
    color_dict = {}

    # 使用掃描線方法填充區域
    for py in range(0, canvas.height):
        # 逐行掃描，判斷每個點是否在圓內
        current_color = None  # 當前掃描線區域的顏色
        for px in range(0, canvas.width):
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)
            
            if in_circle1 and in_circle2 and in_circle3:
                # 三圓交集區域
                if "intersection" not in color_dict:
                    color_dict["intersection"] = random_color_generator()
                current_color = color_dict["intersection"]
            elif in_circle1 and in_circle2:
                # 圓1與圓2的交集區域
                if "circle1_circle2" not in color_dict:
                    color_dict["circle1_circle2"] = random_color_generator()
                current_color = color_dict["circle1_circle2"]
            elif in_circle1 and in_circle3:
                # 圓1與圓3的交集區域
                if "circle1_circle3" not in color_dict:
                    color_dict["circle1_circle3"] = random_color_generator()
                current_color = color_dict["circle1_circle3"]
            elif in_circle2 and in_circle3:
                # 圓2與圓3的交集區域
                if "circle2_circle3" not in color_dict:
                    color_dict["circle2_circle3"] = random_color_generator()
                current_color = color_dict["circle2_circle3"]
            elif in_circle1:
                # 只在圓1內
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 只在圓2內
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                # 只在圓3內
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                # 點不在三個圓內，畫外區域
                current_color = "white"  # 背景色白色

            # 填充顏色
            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素

# 設定圓的半徑
r1, r2, r3 = 100, 100, 100  # 圓1、圓2、圓3 的半徑均為 100

# 呼叫畫圓函式，設定畫布大小 400x400
draw_circles(400, 400, r1, r2, r3)
</script>
</p><h3>w13_hw</h3>
<p><span>1.w13作業，沒混色版                                                 2.w13作業，沒混色版</span></p>
<div id="brython_div1"></div>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
<script type="text/python3">
from browser import html
from browser import document as doc
import math

canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas
 
ctx = canvas.getContext("2d")
ctx.lineWidth = 4

#黑邊圓*2(每個畫四個邊邊)
ctx.strokeStyle = 'black'
#第一個圓
ctx.beginPath()
ctx.arc(160, 160, 141, 0.25 * math.pi,0.75 * math.pi)
ctx.fillStyle = "LightCyan"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 0.75 * math.pi,1.25 * math.pi)
ctx.fillStyle = "Aquamarine"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 1.25 * math.pi,1.75 * math.pi)
ctx.fillStyle = "LightGreen"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 1.75 * math.pi,0.25 * math.pi)
ctx.fillStyle = "LawnGreen"
ctx.fill()
ctx.stroke()

#第二個圓
ctx.beginPath()
ctx.arc(260, 260, 141, 1.25 * math.pi,1.75 * math.pi)
ctx.fillStyle = "Navy"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 1.75 * math.pi,0.25 * math.pi)
ctx.fillStyle = "SlateBlue"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 0.25 * math.pi,0.75 * math.pi)
ctx.fillStyle = "FireBrick"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 0.75 * math.pi,1.25 * math.pi)
ctx.fillStyle = "Yellow"
ctx.fill()
ctx.stroke()


#紅方形*2(4個三角形)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(60,60)
ctx.lineTo(60,260)
ctx.lineTo(260,260)
ctx.fillStyle = "AliceBlue"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(60,60)
ctx.lineTo(260,60)
ctx.lineTo(260,260)
ctx.fillStyle = "Indigo"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(360,160)
ctx.lineTo(360,360)
ctx.fillStyle = "Cyan"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(160,360)
ctx.lineTo(360,360)
ctx.fillStyle = "SpringGreen"
ctx.fill()
ctx.stroke()

 
#重疊的小方型
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(160,260)
ctx.lineTo(260,260)
ctx.fillStyle = "Turquoise"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(260,160)
ctx.lineTo(260,260)
ctx.fillStyle = "SlateBlue"
ctx.fill()
ctx.stroke()


#籃斜線
ctx.strokeStyle = 'blue'
ctx.beginPath() 
ctx.moveTo(60, 60)
ctx.lineTo(260, 260)
ctx.stroke()

canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas
 
ctx = canvas.getContext("2d")
ctx.lineWidth = 4

#混色的
ctx.globalCompositeOperation = "lighter"


#黑邊圓*2(每個畫四個邊邊)
ctx.strokeStyle = 'black'
#第一個圓
ctx.beginPath()
ctx.arc(160, 160, 141, 0.25 * math.pi,0.75 * math.pi)
ctx.fillStyle = "LightCyan"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 0.75 * math.pi,1.25 * math.pi)
ctx.fillStyle = "Aquamarine"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 1.25 * math.pi,1.75 * math.pi)
ctx.fillStyle = "LightGreen"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 1.75 * math.pi,0.25 * math.pi)
ctx.fillStyle = "LawnGreen"
ctx.fill()
ctx.stroke()

#第二個圓
ctx.beginPath()
ctx.arc(260, 260, 141, 1.25 * math.pi,1.75 * math.pi)
ctx.fillStyle = "Navy"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 1.75 * math.pi,0.25 * math.pi)
ctx.fillStyle = "SlateBlue"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 0.25 * math.pi,0.75 * math.pi)
ctx.fillStyle = "FireBrick"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 0.75 * math.pi,1.25 * math.pi)
ctx.fillStyle = "Yellow"
ctx.fill()
ctx.stroke()


#紅方形*2(4個三角形)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(60,60)
ctx.lineTo(60,260)
ctx.lineTo(260,260)
ctx.fillStyle = "AliceBlue"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(60,60)
ctx.lineTo(260,60)
ctx.lineTo(260,260)
ctx.fillStyle = "Indigo"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(360,160)
ctx.lineTo(360,360)
ctx.fillStyle = "Cyan"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(160,360)
ctx.lineTo(360,360)
ctx.fillStyle = "SpringGreen"
ctx.fill()
ctx.stroke()

 
#重疊的小方型
ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(160,260)
ctx.lineTo(260,260)
ctx.fillStyle = "Turquoise"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160,160)
ctx.lineTo(260,160)
ctx.lineTo(260,260)
ctx.fillStyle = "SlateBlue"
ctx.fill()
ctx.stroke()


#籃斜線
ctx.strokeStyle = 'blue'
ctx.beginPath() 
ctx.moveTo(60, 60)
ctx.lineTo(260, 260)
ctx.stroke()
</script>
</p>
<p></p>
<p><span>完成這次作業後，感覺已經能用程式畫出簡單的圖案了</span></p>
<h3>w12_hw</h3>
<p></p>
<h3>w11_hw</h3>
<p></p>
<p><a href="https://mdecp2024.github.io/hw-S41323227/content/Brython.html?src=https://gist.githubusercontent.com/S41323227/a2b0a11b66757f61e0c1672bd2c2bb13/raw/977d5337a729c6afe2013a06f6b287b7e7e06a24/w11_1">第一題</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import math

# 10x10 的字元區域
width = 10
height = 10

# 圓心 (5, 5) 以及半徑 r，這裡選擇半徑為 3
center_x = 5
center_y = 5
radius = 3

# 繪製圓形
for y in range(height):
    for x in range(width):
        # 計算當前點與圓心的距離
        distance = math.sqrt((x - center_x) ** 2 + (y - center_y) ** 2)
        # 如果距離小於等於半徑，則打印 *
        if distance &lt;= radius:
            print('*', end='')
        else:
            print(' ', end='')
    print()  # 換行
</pre>
<p><br/><br/></p>
<p><a href="https://mdecp2024.github.io/hw-S41323227/content/Brython.html?src=https://gist.githubusercontent.com/S41323227/e9452e94a9a9c89e283a91f720affa71/raw/6f16f8cc890abd094cfcdb0238ea709f1ba054c5/w11_2">第二題</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width = 400, height = 400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 每一格的 pixel 數
gs = 20

# gs*tc = canvas width and height

ctx = canvas.getContext("2d")

def dRect(lux, luy, w, h, s=1, c='#ff0000'):
    ctx.lineWidth = s
    ctx.strokeStyle = c
    ctx.beginPath()
    ctx.rect(lux, luy, w, h)
    ctx.stroke()
    
def grid(width, height, grid_pix):
    # x 方向共 width 格
    # y 方向共 height 格
    # grid_pix, 每一個的 pixel 點數
    # 利用迴圈與座標增量繪圖
    for i in range(width):
        for j in range(height):
            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")

def fill(x, y, color):
    ctx.fillStyle = color
    ctx.fillRect(x - 1, y - 1, gs, gs)

# 繪製圓形的邏輯
def draw_circle(center_x, center_y, radius):
    for i in range(10):  # 設定 10x10 網格
        for j in range(10):
            # 計算每個格子中心的 (x, y) 座標
            x_center = (i * gs) + gs / 2
            y_center = (j * gs) + gs / 2
            # 計算每個格子與圓心的距離
            distance = math.sqrt((x_center - center_x) ** 2 + (y_center - center_y) ** 2)
            # 如果距離小於等於半徑，填充這個格子
            if distance &lt;= radius:
                fill(i * gs, j * gs, "black")

# 繪製 10x10 網格
grid(10, 10, gs)

# 圓心設在 (5, 5)，半徑設為 5
center_x = 5 * gs  # 圓心的 x 座標
center_y = 5 * gs  # 圓心的 y 座標
radius = 5 * gs  # 半徑

# 繪製圓形
draw_circle(center_x, center_y, radius)</pre>
<p><span> </span></p>
<p><span>第三題</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/_W-W-JMcggg" width="560"></iframe></p>
<p><span>這次的作業雖然都是靠ChatGPT，但是做完作業後我還是有詳細看這次做出來的程式</span></p>
<p><span></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">n =11
space = '_'
center = n//2
#print(center)

for y in range(n):
    for x in range(n):
        print("(",x,",",y,")",sep="")</pre>
<p><br/><br/></p>
<p><span></span></p><h3>w10</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ZwiK6-mRz7Y" width="560"></iframe></p>
<ol>
<li>變數和函數命名（snake_case）<br/>變數和函數名稱應使用小寫字母，並以底線分隔單詞（這稱為 snake_case）。<br/>2. 類別命名（CamelCase）<br/>類別名稱應使用首字母大寫，並使用駝峰式命名（這稱為 CamelCase）。每個單詞的首字母都要大寫，不使用底線。<br/>3. 常數命名（UPPERCASE_SNAKE_CASE）<br/>常數名稱應該使用全大寫字母，並使用底線分隔單詞（這稱為 UPPERCASE_SNAKE_CASE）。<br/>4. 模組和包命名（lowercase）<br/>模組和包名稱應該是小寫字母，並且避免使用底線（如果不必要的話）。當有多個單詞時，使用小寫字母並用底線分隔。<br/>5. 私有變數命名（單底線前綴）<br/>如果某個變數或方法不應該被外部使用（即設為私有），可以在變數名稱或方法名稱前加上單個底線 _，表示這是內部屬性。<br/>6. 特殊方法命名（__double_underscore__）<br/>Python 中有一些特殊方法，通常是以雙底線包圍的名稱，如 __init__、__str__ 等。這些方法有特殊的用途，通常是 Python 中的內建方法。<br/>7. 函數與變數命名的長度<br/>一般來說，變數名和函數名應該簡短而有意義，避免使用過長或過於簡單的名稱。通常變數和函數的名稱應該能夠清楚表達它的用途。<br/>8. 註解與文檔字串（Docstring）<br/>在 Python 中，函數和類別的開頭應使用文檔字串（docstring）來描述它們的作用和用途。文檔字串應使用三個雙引號 """ 或三個單引號 ''' 包圍。<iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/qpbxk3oQ2kQ" width="560"></iframe><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/VLZwyapEbyI" width="560"></iframe><span>雖然程式還不太懂，但是這個作業讓我完全學會這五種程式執行方法了</span></li>
</ol>
<h3>w7</h3>
<p>我已經會寫簡單的 python 程式了</p>
<p><img alt="" height="229" src="/images/chrome_mPztWDV6ue.gif" width="517"/></p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>硬體 3 考試</h2>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">每六人為一組進行良好的程序練習</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">透過 Jupyterlab 良好的網頁，輪流指定各組編寫的 HW 3 相關的程式練習，以及網頁內容（localhost 與 Codespaces 環境）編輯。</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"></span></span></p>
<p><img alt="" height="240" src="/images/螢幕擷取畫面 2024-10-09 111718.png" width="448"/></p>
<p><img alt="" height="171" src="/images/螢幕擷取畫面 2024-10-09 105858.png" width="452"/></p>
<p></p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>